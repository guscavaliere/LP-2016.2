#+Title: Exercício 1.34
#+Author: Gustavo Cavaliere

<<<<<<< HEAD

Exercise 1.34. Suppose we define the procedure

#+BEGIN_SRC scheme
(define (f g)
 (g 2))

#+END_SRC 


Then we have

#+BEGIN_SRC scheme
=======
Suppose we define the procedure:

#+BEGIN_SRC scheme
  (define (f g)
    (g 2))
#+END_SRC 

Then we have

#+BEGIN_EXAMPLE
>>>>>>> 742e81c0ee9e9252afa5b26c6ac59ca1a209d7fd
(f square)
4

(f (lambda (z) ( * z (+ z 1))))
6
<<<<<<< HEAD

#+END_SRC

What happens if we (perversely) ask the interpreter to evaluate the combination (f f)? Explain. 


O que observamos é que incorremos em um erro, pois, ao avaliar a expressao o compi-
lador executará:
=======
#+END_EXAMPLE

What happens if we (perversely) ask the interpreter to evaluate the
combination =(f f)=? Explain.

O que observamos é que incorremos em um erro, pois, ao avaliar a
expressao o compi- lador executará:
>>>>>>> 742e81c0ee9e9252afa5b26c6ac59ca1a209d7fd

#+BEGIN_SRC scheme
(f f)
(f 2)
(2 2)
<<<<<<< HEAD

#+END_SRC

Como "2"nao é um procedimento, o Dr.Racket retornará o erro:

"application: not a procedure;
 expected a procedure that can be applied to arguments
  given: 2"
=======
#+END_SRC

Como "2" não é um procedimento, o Dr.Racket retornará o erro:

#+BEGIN_EXAMPLE
"application: not a procedure;
 expected a procedure that can be applied to arguments
  given: 2"
#+END_EXAMPLE
>>>>>>> 742e81c0ee9e9252afa5b26c6ac59ca1a209d7fd

